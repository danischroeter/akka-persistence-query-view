/*
 * Copyright 2016 OVO Energy
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/main/protobuf/QueryViewFormats.proto

package akka.contrib.persistence.query;

public final class QueryViewFormats {
    private QueryViewFormats() {}
    public static void registerAllExtensions(
            akka.protobuf.ExtensionRegistry registry) {
    }
    public interface QueryViewSnapshotOrBuilder extends
            // @@protoc_insertion_point(interface_extends:akka.contrib.persistence.query.QueryViewSnapshot)
            akka.protobuf.MessageOrBuilder {

        /**
         * <code>repeated .akka.contrib.persistence.query.QueryViewSnapshot.SequenceNrEntry sequenceNrs = 1;</code>
         */
        java.util.List<akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntry>
        getSequenceNrsList();
        /**
         * <code>repeated .akka.contrib.persistence.query.QueryViewSnapshot.SequenceNrEntry sequenceNrs = 1;</code>
         */
        akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntry getSequenceNrs(int index);
        /**
         * <code>repeated .akka.contrib.persistence.query.QueryViewSnapshot.SequenceNrEntry sequenceNrs = 1;</code>
         */
        int getSequenceNrsCount();
        /**
         * <code>repeated .akka.contrib.persistence.query.QueryViewSnapshot.SequenceNrEntry sequenceNrs = 1;</code>
         */
        java.util.List<? extends akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntryOrBuilder>
        getSequenceNrsOrBuilderList();
        /**
         * <code>repeated .akka.contrib.persistence.query.QueryViewSnapshot.SequenceNrEntry sequenceNrs = 1;</code>
         */
        akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntryOrBuilder getSequenceNrsOrBuilder(
                int index);

        /**
         * <code>optional .akka.contrib.persistence.query.Payload maxOffset = 2;</code>
         */
        boolean hasMaxOffset();
        /**
         * <code>optional .akka.contrib.persistence.query.Payload maxOffset = 2;</code>
         */
        akka.contrib.persistence.query.QueryViewFormats.Payload getMaxOffset();
        /**
         * <code>optional .akka.contrib.persistence.query.Payload maxOffset = 2;</code>
         */
        akka.contrib.persistence.query.QueryViewFormats.PayloadOrBuilder getMaxOffsetOrBuilder();

        /**
         * <code>optional .akka.contrib.persistence.query.Payload data = 3;</code>
         */
        boolean hasData();
        /**
         * <code>optional .akka.contrib.persistence.query.Payload data = 3;</code>
         */
        akka.contrib.persistence.query.QueryViewFormats.Payload getData();
        /**
         * <code>optional .akka.contrib.persistence.query.Payload data = 3;</code>
         */
        akka.contrib.persistence.query.QueryViewFormats.PayloadOrBuilder getDataOrBuilder();
    }
    /**
     * Protobuf type {@code akka.contrib.persistence.query.QueryViewSnapshot}
     */
    public static final class QueryViewSnapshot extends
            akka.protobuf.GeneratedMessage implements
            // @@protoc_insertion_point(message_implements:akka.contrib.persistence.query.QueryViewSnapshot)
            QueryViewSnapshotOrBuilder {
        // Use QueryViewSnapshot.newBuilder() to construct.
        private QueryViewSnapshot(akka.protobuf.GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }
        private QueryViewSnapshot(boolean noInit) { this.unknownFields = akka.protobuf.UnknownFieldSet.getDefaultInstance(); }

        private static final QueryViewSnapshot defaultInstance;
        public static QueryViewSnapshot getDefaultInstance() {
            return defaultInstance;
        }

        public QueryViewSnapshot getDefaultInstanceForType() {
            return defaultInstance;
        }

        private final akka.protobuf.UnknownFieldSet unknownFields;
        @java.lang.Override
        public final akka.protobuf.UnknownFieldSet
        getUnknownFields() {
            return this.unknownFields;
        }
        private QueryViewSnapshot(
                akka.protobuf.CodedInputStream input,
                akka.protobuf.ExtensionRegistryLite extensionRegistry)
                throws akka.protobuf.InvalidProtocolBufferException {
            initFields();
            int mutable_bitField0_ = 0;
            akka.protobuf.UnknownFieldSet.Builder unknownFields =
                    akka.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFields,
                                    extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 10: {
                            if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                                sequenceNrs_ = new java.util.ArrayList<akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntry>();
                                mutable_bitField0_ |= 0x00000001;
                            }
                            sequenceNrs_.add(input.readMessage(akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntry.PARSER, extensionRegistry));
                            break;
                        }
                        case 18: {
                            akka.contrib.persistence.query.QueryViewFormats.Payload.Builder subBuilder = null;
                            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                                subBuilder = maxOffset_.toBuilder();
                            }
                            maxOffset_ = input.readMessage(akka.contrib.persistence.query.QueryViewFormats.Payload.PARSER, extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(maxOffset_);
                                maxOffset_ = subBuilder.buildPartial();
                            }
                            bitField0_ |= 0x00000001;
                            break;
                        }
                        case 26: {
                            akka.contrib.persistence.query.QueryViewFormats.Payload.Builder subBuilder = null;
                            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                                subBuilder = data_.toBuilder();
                            }
                            data_ = input.readMessage(akka.contrib.persistence.query.QueryViewFormats.Payload.PARSER, extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(data_);
                                data_ = subBuilder.buildPartial();
                            }
                            bitField0_ |= 0x00000002;
                            break;
                        }
                    }
                }
            } catch (akka.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new akka.protobuf.InvalidProtocolBufferException(
                        e.getMessage()).setUnfinishedMessage(this);
            } finally {
                if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                    sequenceNrs_ = java.util.Collections.unmodifiableList(sequenceNrs_);
                }
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }
        public static final akka.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return akka.contrib.persistence.query.QueryViewFormats.internal_static_akka_contrib_persistence_query_QueryViewSnapshot_descriptor;
        }

        protected akka.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return akka.contrib.persistence.query.QueryViewFormats.internal_static_akka_contrib_persistence_query_QueryViewSnapshot_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.class, akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.Builder.class);
        }

        public static akka.protobuf.Parser<QueryViewSnapshot> PARSER =
                new akka.protobuf.AbstractParser<QueryViewSnapshot>() {
                    public QueryViewSnapshot parsePartialFrom(
                            akka.protobuf.CodedInputStream input,
                            akka.protobuf.ExtensionRegistryLite extensionRegistry)
                            throws akka.protobuf.InvalidProtocolBufferException {
                        return new QueryViewSnapshot(input, extensionRegistry);
                    }
                };

        @java.lang.Override
        public akka.protobuf.Parser<QueryViewSnapshot> getParserForType() {
            return PARSER;
        }

        public interface SequenceNrEntryOrBuilder extends
                // @@protoc_insertion_point(interface_extends:akka.contrib.persistence.query.QueryViewSnapshot.SequenceNrEntry)
                akka.protobuf.MessageOrBuilder {

            /**
             * <code>optional string persistenceId = 1;</code>
             */
            boolean hasPersistenceId();
            /**
             * <code>optional string persistenceId = 1;</code>
             */
            java.lang.String getPersistenceId();
            /**
             * <code>optional string persistenceId = 1;</code>
             */
            akka.protobuf.ByteString
            getPersistenceIdBytes();

            /**
             * <code>optional int64 sequenceNr = 2;</code>
             */
            boolean hasSequenceNr();
            /**
             * <code>optional int64 sequenceNr = 2;</code>
             */
            long getSequenceNr();
        }
        /**
         * Protobuf type {@code akka.contrib.persistence.query.QueryViewSnapshot.SequenceNrEntry}
         */
        public static final class SequenceNrEntry extends
                akka.protobuf.GeneratedMessage implements
                // @@protoc_insertion_point(message_implements:akka.contrib.persistence.query.QueryViewSnapshot.SequenceNrEntry)
                SequenceNrEntryOrBuilder {
            // Use SequenceNrEntry.newBuilder() to construct.
            private SequenceNrEntry(akka.protobuf.GeneratedMessage.Builder<?> builder) {
                super(builder);
                this.unknownFields = builder.getUnknownFields();
            }
            private SequenceNrEntry(boolean noInit) { this.unknownFields = akka.protobuf.UnknownFieldSet.getDefaultInstance(); }

            private static final SequenceNrEntry defaultInstance;
            public static SequenceNrEntry getDefaultInstance() {
                return defaultInstance;
            }

            public SequenceNrEntry getDefaultInstanceForType() {
                return defaultInstance;
            }

            private final akka.protobuf.UnknownFieldSet unknownFields;
            @java.lang.Override
            public final akka.protobuf.UnknownFieldSet
            getUnknownFields() {
                return this.unknownFields;
            }
            private SequenceNrEntry(
                    akka.protobuf.CodedInputStream input,
                    akka.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws akka.protobuf.InvalidProtocolBufferException {
                initFields();
                int mutable_bitField0_ = 0;
                akka.protobuf.UnknownFieldSet.Builder unknownFields =
                        akka.protobuf.UnknownFieldSet.newBuilder();
                try {
                    boolean done = false;
                    while (!done) {
                        int tag = input.readTag();
                        switch (tag) {
                            case 0:
                                done = true;
                                break;
                            default: {
                                if (!parseUnknownField(input, unknownFields,
                                        extensionRegistry, tag)) {
                                    done = true;
                                }
                                break;
                            }
                            case 10: {
                                akka.protobuf.ByteString bs = input.readBytes();
                                bitField0_ |= 0x00000001;
                                persistenceId_ = bs;
                                break;
                            }
                            case 16: {
                                bitField0_ |= 0x00000002;
                                sequenceNr_ = input.readInt64();
                                break;
                            }
                        }
                    }
                } catch (akka.protobuf.InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (java.io.IOException e) {
                    throw new akka.protobuf.InvalidProtocolBufferException(
                            e.getMessage()).setUnfinishedMessage(this);
                } finally {
                    this.unknownFields = unknownFields.build();
                    makeExtensionsImmutable();
                }
            }
            public static final akka.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return akka.contrib.persistence.query.QueryViewFormats.internal_static_akka_contrib_persistence_query_QueryViewSnapshot_SequenceNrEntry_descriptor;
            }

            protected akka.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return akka.contrib.persistence.query.QueryViewFormats.internal_static_akka_contrib_persistence_query_QueryViewSnapshot_SequenceNrEntry_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntry.class, akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntry.Builder.class);
            }

            public static akka.protobuf.Parser<SequenceNrEntry> PARSER =
                    new akka.protobuf.AbstractParser<SequenceNrEntry>() {
                        public SequenceNrEntry parsePartialFrom(
                                akka.protobuf.CodedInputStream input,
                                akka.protobuf.ExtensionRegistryLite extensionRegistry)
                                throws akka.protobuf.InvalidProtocolBufferException {
                            return new SequenceNrEntry(input, extensionRegistry);
                        }
                    };

            @java.lang.Override
            public akka.protobuf.Parser<SequenceNrEntry> getParserForType() {
                return PARSER;
            }

            private int bitField0_;
            public static final int PERSISTENCEID_FIELD_NUMBER = 1;
            private java.lang.Object persistenceId_;
            /**
             * <code>optional string persistenceId = 1;</code>
             */
            public boolean hasPersistenceId() {
                return ((bitField0_ & 0x00000001) == 0x00000001);
            }
            /**
             * <code>optional string persistenceId = 1;</code>
             */
            public java.lang.String getPersistenceId() {
                java.lang.Object ref = persistenceId_;
                if (ref instanceof java.lang.String) {
                    return (java.lang.String) ref;
                } else {
                    akka.protobuf.ByteString bs =
                            (akka.protobuf.ByteString) ref;
                    java.lang.String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) {
                        persistenceId_ = s;
                    }
                    return s;
                }
            }
            /**
             * <code>optional string persistenceId = 1;</code>
             */
            public akka.protobuf.ByteString
            getPersistenceIdBytes() {
                java.lang.Object ref = persistenceId_;
                if (ref instanceof java.lang.String) {
                    akka.protobuf.ByteString b =
                            akka.protobuf.ByteString.copyFromUtf8(
                                    (java.lang.String) ref);
                    persistenceId_ = b;
                    return b;
                } else {
                    return (akka.protobuf.ByteString) ref;
                }
            }

            public static final int SEQUENCENR_FIELD_NUMBER = 2;
            private long sequenceNr_;
            /**
             * <code>optional int64 sequenceNr = 2;</code>
             */
            public boolean hasSequenceNr() {
                return ((bitField0_ & 0x00000002) == 0x00000002);
            }
            /**
             * <code>optional int64 sequenceNr = 2;</code>
             */
            public long getSequenceNr() {
                return sequenceNr_;
            }

            private void initFields() {
                persistenceId_ = "";
                sequenceNr_ = 0L;
            }
            private byte memoizedIsInitialized = -1;
            public final boolean isInitialized() {
                byte isInitialized = memoizedIsInitialized;
                if (isInitialized == 1) return true;
                if (isInitialized == 0) return false;

                memoizedIsInitialized = 1;
                return true;
            }

            public void writeTo(akka.protobuf.CodedOutputStream output)
                    throws java.io.IOException {
                getSerializedSize();
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                    output.writeBytes(1, getPersistenceIdBytes());
                }
                if (((bitField0_ & 0x00000002) == 0x00000002)) {
                    output.writeInt64(2, sequenceNr_);
                }
                getUnknownFields().writeTo(output);
            }

            private int memoizedSerializedSize = -1;
            public int getSerializedSize() {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                    size += akka.protobuf.CodedOutputStream
                            .computeBytesSize(1, getPersistenceIdBytes());
                }
                if (((bitField0_ & 0x00000002) == 0x00000002)) {
                    size += akka.protobuf.CodedOutputStream
                            .computeInt64Size(2, sequenceNr_);
                }
                size += getUnknownFields().getSerializedSize();
                memoizedSerializedSize = size;
                return size;
            }

            private static final long serialVersionUID = 0L;
            @java.lang.Override
            protected java.lang.Object writeReplace()
                    throws java.io.ObjectStreamException {
                return super.writeReplace();
            }

            public static akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntry parseFrom(
                    akka.protobuf.ByteString data)
                    throws akka.protobuf.InvalidProtocolBufferException {
                return PARSER.parseFrom(data);
            }
            public static akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntry parseFrom(
                    akka.protobuf.ByteString data,
                    akka.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws akka.protobuf.InvalidProtocolBufferException {
                return PARSER.parseFrom(data, extensionRegistry);
            }
            public static akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntry parseFrom(byte[] data)
                    throws akka.protobuf.InvalidProtocolBufferException {
                return PARSER.parseFrom(data);
            }
            public static akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntry parseFrom(
                    byte[] data,
                    akka.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws akka.protobuf.InvalidProtocolBufferException {
                return PARSER.parseFrom(data, extensionRegistry);
            }
            public static akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntry parseFrom(java.io.InputStream input)
                    throws java.io.IOException {
                return PARSER.parseFrom(input);
            }
            public static akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntry parseFrom(
                    java.io.InputStream input,
                    akka.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                return PARSER.parseFrom(input, extensionRegistry);
            }
            public static akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntry parseDelimitedFrom(java.io.InputStream input)
                    throws java.io.IOException {
                return PARSER.parseDelimitedFrom(input);
            }
            public static akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntry parseDelimitedFrom(
                    java.io.InputStream input,
                    akka.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                return PARSER.parseDelimitedFrom(input, extensionRegistry);
            }
            public static akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntry parseFrom(
                    akka.protobuf.CodedInputStream input)
                    throws java.io.IOException {
                return PARSER.parseFrom(input);
            }
            public static akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntry parseFrom(
                    akka.protobuf.CodedInputStream input,
                    akka.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                return PARSER.parseFrom(input, extensionRegistry);
            }

            public static Builder newBuilder() { return Builder.create(); }
            public Builder newBuilderForType() { return newBuilder(); }
            public static Builder newBuilder(akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntry prototype) {
                return newBuilder().mergeFrom(prototype);
            }
            public Builder toBuilder() { return newBuilder(this); }

            @java.lang.Override
            protected Builder newBuilderForType(
                    akka.protobuf.GeneratedMessage.BuilderParent parent) {
                Builder builder = new Builder(parent);
                return builder;
            }
            /**
             * Protobuf type {@code akka.contrib.persistence.query.QueryViewSnapshot.SequenceNrEntry}
             */
            public static final class Builder extends
                    akka.protobuf.GeneratedMessage.Builder<Builder> implements
                    // @@protoc_insertion_point(builder_implements:akka.contrib.persistence.query.QueryViewSnapshot.SequenceNrEntry)
                    akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntryOrBuilder {
                public static final akka.protobuf.Descriptors.Descriptor
                getDescriptor() {
                    return akka.contrib.persistence.query.QueryViewFormats.internal_static_akka_contrib_persistence_query_QueryViewSnapshot_SequenceNrEntry_descriptor;
                }

                protected akka.protobuf.GeneratedMessage.FieldAccessorTable
                internalGetFieldAccessorTable() {
                    return akka.contrib.persistence.query.QueryViewFormats.internal_static_akka_contrib_persistence_query_QueryViewSnapshot_SequenceNrEntry_fieldAccessorTable
                            .ensureFieldAccessorsInitialized(
                                    akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntry.class, akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntry.Builder.class);
                }

                // Construct using akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntry.newBuilder()
                private Builder() {
                    maybeForceBuilderInitialization();
                }

                private Builder(
                        akka.protobuf.GeneratedMessage.BuilderParent parent) {
                    super(parent);
                    maybeForceBuilderInitialization();
                }
                private void maybeForceBuilderInitialization() {
                    if (akka.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                    }
                }
                private static Builder create() {
                    return new Builder();
                }

                public Builder clear() {
                    super.clear();
                    persistenceId_ = "";
                    bitField0_ = (bitField0_ & ~0x00000001);
                    sequenceNr_ = 0L;
                    bitField0_ = (bitField0_ & ~0x00000002);
                    return this;
                }

                public Builder clone() {
                    return create().mergeFrom(buildPartial());
                }

                public akka.protobuf.Descriptors.Descriptor
                getDescriptorForType() {
                    return akka.contrib.persistence.query.QueryViewFormats.internal_static_akka_contrib_persistence_query_QueryViewSnapshot_SequenceNrEntry_descriptor;
                }

                public akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntry getDefaultInstanceForType() {
                    return akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntry.getDefaultInstance();
                }

                public akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntry build() {
                    akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntry result = buildPartial();
                    if (!result.isInitialized()) {
                        throw newUninitializedMessageException(result);
                    }
                    return result;
                }

                public akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntry buildPartial() {
                    akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntry result = new akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntry(this);
                    int from_bitField0_ = bitField0_;
                    int to_bitField0_ = 0;
                    if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                        to_bitField0_ |= 0x00000001;
                    }
                    result.persistenceId_ = persistenceId_;
                    if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                        to_bitField0_ |= 0x00000002;
                    }
                    result.sequenceNr_ = sequenceNr_;
                    result.bitField0_ = to_bitField0_;
                    onBuilt();
                    return result;
                }

                public Builder mergeFrom(akka.protobuf.Message other) {
                    if (other instanceof akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntry) {
                        return mergeFrom((akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntry)other);
                    } else {
                        super.mergeFrom(other);
                        return this;
                    }
                }

                public Builder mergeFrom(akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntry other) {
                    if (other == akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntry.getDefaultInstance()) return this;
                    if (other.hasPersistenceId()) {
                        bitField0_ |= 0x00000001;
                        persistenceId_ = other.persistenceId_;
                        onChanged();
                    }
                    if (other.hasSequenceNr()) {
                        setSequenceNr(other.getSequenceNr());
                    }
                    this.mergeUnknownFields(other.getUnknownFields());
                    return this;
                }

                public final boolean isInitialized() {
                    return true;
                }

                public Builder mergeFrom(
                        akka.protobuf.CodedInputStream input,
                        akka.protobuf.ExtensionRegistryLite extensionRegistry)
                        throws java.io.IOException {
                    akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntry parsedMessage = null;
                    try {
                        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                    } catch (akka.protobuf.InvalidProtocolBufferException e) {
                        parsedMessage = (akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntry) e.getUnfinishedMessage();
                        throw e;
                    } finally {
                        if (parsedMessage != null) {
                            mergeFrom(parsedMessage);
                        }
                    }
                    return this;
                }
                private int bitField0_;

                private java.lang.Object persistenceId_ = "";
                /**
                 * <code>optional string persistenceId = 1;</code>
                 */
                public boolean hasPersistenceId() {
                    return ((bitField0_ & 0x00000001) == 0x00000001);
                }
                /**
                 * <code>optional string persistenceId = 1;</code>
                 */
                public java.lang.String getPersistenceId() {
                    java.lang.Object ref = persistenceId_;
                    if (!(ref instanceof java.lang.String)) {
                        akka.protobuf.ByteString bs =
                                (akka.protobuf.ByteString) ref;
                        java.lang.String s = bs.toStringUtf8();
                        if (bs.isValidUtf8()) {
                            persistenceId_ = s;
                        }
                        return s;
                    } else {
                        return (java.lang.String) ref;
                    }
                }
                /**
                 * <code>optional string persistenceId = 1;</code>
                 */
                public akka.protobuf.ByteString
                getPersistenceIdBytes() {
                    java.lang.Object ref = persistenceId_;
                    if (ref instanceof String) {
                        akka.protobuf.ByteString b =
                                akka.protobuf.ByteString.copyFromUtf8(
                                        (java.lang.String) ref);
                        persistenceId_ = b;
                        return b;
                    } else {
                        return (akka.protobuf.ByteString) ref;
                    }
                }
                /**
                 * <code>optional string persistenceId = 1;</code>
                 */
                public Builder setPersistenceId(
                        java.lang.String value) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    bitField0_ |= 0x00000001;
                    persistenceId_ = value;
                    onChanged();
                    return this;
                }
                /**
                 * <code>optional string persistenceId = 1;</code>
                 */
                public Builder clearPersistenceId() {
                    bitField0_ = (bitField0_ & ~0x00000001);
                    persistenceId_ = getDefaultInstance().getPersistenceId();
                    onChanged();
                    return this;
                }
                /**
                 * <code>optional string persistenceId = 1;</code>
                 */
                public Builder setPersistenceIdBytes(
                        akka.protobuf.ByteString value) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    bitField0_ |= 0x00000001;
                    persistenceId_ = value;
                    onChanged();
                    return this;
                }

                private long sequenceNr_ ;
                /**
                 * <code>optional int64 sequenceNr = 2;</code>
                 */
                public boolean hasSequenceNr() {
                    return ((bitField0_ & 0x00000002) == 0x00000002);
                }
                /**
                 * <code>optional int64 sequenceNr = 2;</code>
                 */
                public long getSequenceNr() {
                    return sequenceNr_;
                }
                /**
                 * <code>optional int64 sequenceNr = 2;</code>
                 */
                public Builder setSequenceNr(long value) {
                    bitField0_ |= 0x00000002;
                    sequenceNr_ = value;
                    onChanged();
                    return this;
                }
                /**
                 * <code>optional int64 sequenceNr = 2;</code>
                 */
                public Builder clearSequenceNr() {
                    bitField0_ = (bitField0_ & ~0x00000002);
                    sequenceNr_ = 0L;
                    onChanged();
                    return this;
                }

                // @@protoc_insertion_point(builder_scope:akka.contrib.persistence.query.QueryViewSnapshot.SequenceNrEntry)
            }

            static {
                defaultInstance = new SequenceNrEntry(true);
                defaultInstance.initFields();
            }

            // @@protoc_insertion_point(class_scope:akka.contrib.persistence.query.QueryViewSnapshot.SequenceNrEntry)
        }

        private int bitField0_;
        public static final int SEQUENCENRS_FIELD_NUMBER = 1;
        private java.util.List<akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntry> sequenceNrs_;
        /**
         * <code>repeated .akka.contrib.persistence.query.QueryViewSnapshot.SequenceNrEntry sequenceNrs = 1;</code>
         */
        public java.util.List<akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntry> getSequenceNrsList() {
            return sequenceNrs_;
        }
        /**
         * <code>repeated .akka.contrib.persistence.query.QueryViewSnapshot.SequenceNrEntry sequenceNrs = 1;</code>
         */
        public java.util.List<? extends akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntryOrBuilder>
        getSequenceNrsOrBuilderList() {
            return sequenceNrs_;
        }
        /**
         * <code>repeated .akka.contrib.persistence.query.QueryViewSnapshot.SequenceNrEntry sequenceNrs = 1;</code>
         */
        public int getSequenceNrsCount() {
            return sequenceNrs_.size();
        }
        /**
         * <code>repeated .akka.contrib.persistence.query.QueryViewSnapshot.SequenceNrEntry sequenceNrs = 1;</code>
         */
        public akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntry getSequenceNrs(int index) {
            return sequenceNrs_.get(index);
        }
        /**
         * <code>repeated .akka.contrib.persistence.query.QueryViewSnapshot.SequenceNrEntry sequenceNrs = 1;</code>
         */
        public akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntryOrBuilder getSequenceNrsOrBuilder(
                int index) {
            return sequenceNrs_.get(index);
        }

        public static final int MAXOFFSET_FIELD_NUMBER = 2;
        private akka.contrib.persistence.query.QueryViewFormats.Payload maxOffset_;
        /**
         * <code>optional .akka.contrib.persistence.query.Payload maxOffset = 2;</code>
         */
        public boolean hasMaxOffset() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional .akka.contrib.persistence.query.Payload maxOffset = 2;</code>
         */
        public akka.contrib.persistence.query.QueryViewFormats.Payload getMaxOffset() {
            return maxOffset_;
        }
        /**
         * <code>optional .akka.contrib.persistence.query.Payload maxOffset = 2;</code>
         */
        public akka.contrib.persistence.query.QueryViewFormats.PayloadOrBuilder getMaxOffsetOrBuilder() {
            return maxOffset_;
        }

        public static final int DATA_FIELD_NUMBER = 3;
        private akka.contrib.persistence.query.QueryViewFormats.Payload data_;
        /**
         * <code>optional .akka.contrib.persistence.query.Payload data = 3;</code>
         */
        public boolean hasData() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional .akka.contrib.persistence.query.Payload data = 3;</code>
         */
        public akka.contrib.persistence.query.QueryViewFormats.Payload getData() {
            return data_;
        }
        /**
         * <code>optional .akka.contrib.persistence.query.Payload data = 3;</code>
         */
        public akka.contrib.persistence.query.QueryViewFormats.PayloadOrBuilder getDataOrBuilder() {
            return data_;
        }

        private void initFields() {
            sequenceNrs_ = java.util.Collections.emptyList();
            maxOffset_ = akka.contrib.persistence.query.QueryViewFormats.Payload.getDefaultInstance();
            data_ = akka.contrib.persistence.query.QueryViewFormats.Payload.getDefaultInstance();
        }
        private byte memoizedIsInitialized = -1;
        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(akka.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            getSerializedSize();
            for (int i = 0; i < sequenceNrs_.size(); i++) {
                output.writeMessage(1, sequenceNrs_.get(i));
            }
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeMessage(2, maxOffset_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                output.writeMessage(3, data_);
            }
            getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;
        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            for (int i = 0; i < sequenceNrs_.size(); i++) {
                size += akka.protobuf.CodedOutputStream
                        .computeMessageSize(1, sequenceNrs_.get(i));
            }
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += akka.protobuf.CodedOutputStream
                        .computeMessageSize(2, maxOffset_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                size += akka.protobuf.CodedOutputStream
                        .computeMessageSize(3, data_);
            }
            size += getUnknownFields().getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;
        @java.lang.Override
        protected java.lang.Object writeReplace()
                throws java.io.ObjectStreamException {
            return super.writeReplace();
        }

        public static akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot parseFrom(
                akka.protobuf.ByteString data)
                throws akka.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }
        public static akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot parseFrom(
                akka.protobuf.ByteString data,
                akka.protobuf.ExtensionRegistryLite extensionRegistry)
                throws akka.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }
        public static akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot parseFrom(byte[] data)
                throws akka.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }
        public static akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot parseFrom(
                byte[] data,
                akka.protobuf.ExtensionRegistryLite extensionRegistry)
                throws akka.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }
        public static akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }
        public static akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot parseFrom(
                java.io.InputStream input,
                akka.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }
        public static akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input);
        }
        public static akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot parseDelimitedFrom(
                java.io.InputStream input,
                akka.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }
        public static akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot parseFrom(
                akka.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }
        public static akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot parseFrom(
                akka.protobuf.CodedInputStream input,
                akka.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() { return Builder.create(); }
        public Builder newBuilderForType() { return newBuilder(); }
        public static Builder newBuilder(akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot prototype) {
            return newBuilder().mergeFrom(prototype);
        }
        public Builder toBuilder() { return newBuilder(this); }

        @java.lang.Override
        protected Builder newBuilderForType(
                akka.protobuf.GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }
        /**
         * Protobuf type {@code akka.contrib.persistence.query.QueryViewSnapshot}
         */
        public static final class Builder extends
                akka.protobuf.GeneratedMessage.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:akka.contrib.persistence.query.QueryViewSnapshot)
                akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshotOrBuilder {
            public static final akka.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return akka.contrib.persistence.query.QueryViewFormats.internal_static_akka_contrib_persistence_query_QueryViewSnapshot_descriptor;
            }

            protected akka.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return akka.contrib.persistence.query.QueryViewFormats.internal_static_akka_contrib_persistence_query_QueryViewSnapshot_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.class, akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.Builder.class);
            }

            // Construct using akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    akka.protobuf.GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }
            private void maybeForceBuilderInitialization() {
                if (akka.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                    getSequenceNrsFieldBuilder();
                    getMaxOffsetFieldBuilder();
                    getDataFieldBuilder();
                }
            }
            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                if (sequenceNrsBuilder_ == null) {
                    sequenceNrs_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000001);
                } else {
                    sequenceNrsBuilder_.clear();
                }
                if (maxOffsetBuilder_ == null) {
                    maxOffset_ = akka.contrib.persistence.query.QueryViewFormats.Payload.getDefaultInstance();
                } else {
                    maxOffsetBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000002);
                if (dataBuilder_ == null) {
                    data_ = akka.contrib.persistence.query.QueryViewFormats.Payload.getDefaultInstance();
                } else {
                    dataBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000004);
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public akka.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return akka.contrib.persistence.query.QueryViewFormats.internal_static_akka_contrib_persistence_query_QueryViewSnapshot_descriptor;
            }

            public akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot getDefaultInstanceForType() {
                return akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.getDefaultInstance();
            }

            public akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot build() {
                akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot buildPartial() {
                akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot result = new akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if (sequenceNrsBuilder_ == null) {
                    if (((bitField0_ & 0x00000001) == 0x00000001)) {
                        sequenceNrs_ = java.util.Collections.unmodifiableList(sequenceNrs_);
                        bitField0_ = (bitField0_ & ~0x00000001);
                    }
                    result.sequenceNrs_ = sequenceNrs_;
                } else {
                    result.sequenceNrs_ = sequenceNrsBuilder_.build();
                }
                if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                    to_bitField0_ |= 0x00000001;
                }
                if (maxOffsetBuilder_ == null) {
                    result.maxOffset_ = maxOffset_;
                } else {
                    result.maxOffset_ = maxOffsetBuilder_.build();
                }
                if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
                    to_bitField0_ |= 0x00000002;
                }
                if (dataBuilder_ == null) {
                    result.data_ = data_;
                } else {
                    result.data_ = dataBuilder_.build();
                }
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(akka.protobuf.Message other) {
                if (other instanceof akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot) {
                    return mergeFrom((akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot)other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot other) {
                if (other == akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.getDefaultInstance()) return this;
                if (sequenceNrsBuilder_ == null) {
                    if (!other.sequenceNrs_.isEmpty()) {
                        if (sequenceNrs_.isEmpty()) {
                            sequenceNrs_ = other.sequenceNrs_;
                            bitField0_ = (bitField0_ & ~0x00000001);
                        } else {
                            ensureSequenceNrsIsMutable();
                            sequenceNrs_.addAll(other.sequenceNrs_);
                        }
                        onChanged();
                    }
                } else {
                    if (!other.sequenceNrs_.isEmpty()) {
                        if (sequenceNrsBuilder_.isEmpty()) {
                            sequenceNrsBuilder_.dispose();
                            sequenceNrsBuilder_ = null;
                            sequenceNrs_ = other.sequenceNrs_;
                            bitField0_ = (bitField0_ & ~0x00000001);
                            sequenceNrsBuilder_ =
                                    akka.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                                            getSequenceNrsFieldBuilder() : null;
                        } else {
                            sequenceNrsBuilder_.addAllMessages(other.sequenceNrs_);
                        }
                    }
                }
                if (other.hasMaxOffset()) {
                    mergeMaxOffset(other.getMaxOffset());
                }
                if (other.hasData()) {
                    mergeData(other.getData());
                }
                this.mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    akka.protobuf.CodedInputStream input,
                    akka.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (akka.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }
            private int bitField0_;

            private java.util.List<akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntry> sequenceNrs_ =
                    java.util.Collections.emptyList();
            private void ensureSequenceNrsIsMutable() {
                if (!((bitField0_ & 0x00000001) == 0x00000001)) {
                    sequenceNrs_ = new java.util.ArrayList<akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntry>(sequenceNrs_);
                    bitField0_ |= 0x00000001;
                }
            }

            private akka.protobuf.RepeatedFieldBuilder<
                    akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntry, akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntry.Builder, akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntryOrBuilder> sequenceNrsBuilder_;

            /**
             * <code>repeated .akka.contrib.persistence.query.QueryViewSnapshot.SequenceNrEntry sequenceNrs = 1;</code>
             */
            public java.util.List<akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntry> getSequenceNrsList() {
                if (sequenceNrsBuilder_ == null) {
                    return java.util.Collections.unmodifiableList(sequenceNrs_);
                } else {
                    return sequenceNrsBuilder_.getMessageList();
                }
            }
            /**
             * <code>repeated .akka.contrib.persistence.query.QueryViewSnapshot.SequenceNrEntry sequenceNrs = 1;</code>
             */
            public int getSequenceNrsCount() {
                if (sequenceNrsBuilder_ == null) {
                    return sequenceNrs_.size();
                } else {
                    return sequenceNrsBuilder_.getCount();
                }
            }
            /**
             * <code>repeated .akka.contrib.persistence.query.QueryViewSnapshot.SequenceNrEntry sequenceNrs = 1;</code>
             */
            public akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntry getSequenceNrs(int index) {
                if (sequenceNrsBuilder_ == null) {
                    return sequenceNrs_.get(index);
                } else {
                    return sequenceNrsBuilder_.getMessage(index);
                }
            }
            /**
             * <code>repeated .akka.contrib.persistence.query.QueryViewSnapshot.SequenceNrEntry sequenceNrs = 1;</code>
             */
            public Builder setSequenceNrs(
                    int index, akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntry value) {
                if (sequenceNrsBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureSequenceNrsIsMutable();
                    sequenceNrs_.set(index, value);
                    onChanged();
                } else {
                    sequenceNrsBuilder_.setMessage(index, value);
                }
                return this;
            }
            /**
             * <code>repeated .akka.contrib.persistence.query.QueryViewSnapshot.SequenceNrEntry sequenceNrs = 1;</code>
             */
            public Builder setSequenceNrs(
                    int index, akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntry.Builder builderForValue) {
                if (sequenceNrsBuilder_ == null) {
                    ensureSequenceNrsIsMutable();
                    sequenceNrs_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    sequenceNrsBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }
            /**
             * <code>repeated .akka.contrib.persistence.query.QueryViewSnapshot.SequenceNrEntry sequenceNrs = 1;</code>
             */
            public Builder addSequenceNrs(akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntry value) {
                if (sequenceNrsBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureSequenceNrsIsMutable();
                    sequenceNrs_.add(value);
                    onChanged();
                } else {
                    sequenceNrsBuilder_.addMessage(value);
                }
                return this;
            }
            /**
             * <code>repeated .akka.contrib.persistence.query.QueryViewSnapshot.SequenceNrEntry sequenceNrs = 1;</code>
             */
            public Builder addSequenceNrs(
                    int index, akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntry value) {
                if (sequenceNrsBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureSequenceNrsIsMutable();
                    sequenceNrs_.add(index, value);
                    onChanged();
                } else {
                    sequenceNrsBuilder_.addMessage(index, value);
                }
                return this;
            }
            /**
             * <code>repeated .akka.contrib.persistence.query.QueryViewSnapshot.SequenceNrEntry sequenceNrs = 1;</code>
             */
            public Builder addSequenceNrs(
                    akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntry.Builder builderForValue) {
                if (sequenceNrsBuilder_ == null) {
                    ensureSequenceNrsIsMutable();
                    sequenceNrs_.add(builderForValue.build());
                    onChanged();
                } else {
                    sequenceNrsBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }
            /**
             * <code>repeated .akka.contrib.persistence.query.QueryViewSnapshot.SequenceNrEntry sequenceNrs = 1;</code>
             */
            public Builder addSequenceNrs(
                    int index, akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntry.Builder builderForValue) {
                if (sequenceNrsBuilder_ == null) {
                    ensureSequenceNrsIsMutable();
                    sequenceNrs_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    sequenceNrsBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }
            /**
             * <code>repeated .akka.contrib.persistence.query.QueryViewSnapshot.SequenceNrEntry sequenceNrs = 1;</code>
             */
            public Builder addAllSequenceNrs(
                    java.lang.Iterable<? extends akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntry> values) {
                if (sequenceNrsBuilder_ == null) {
                    ensureSequenceNrsIsMutable();
                    akka.protobuf.AbstractMessageLite.Builder.addAll(
                            values, sequenceNrs_);
                    onChanged();
                } else {
                    sequenceNrsBuilder_.addAllMessages(values);
                }
                return this;
            }
            /**
             * <code>repeated .akka.contrib.persistence.query.QueryViewSnapshot.SequenceNrEntry sequenceNrs = 1;</code>
             */
            public Builder clearSequenceNrs() {
                if (sequenceNrsBuilder_ == null) {
                    sequenceNrs_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000001);
                    onChanged();
                } else {
                    sequenceNrsBuilder_.clear();
                }
                return this;
            }
            /**
             * <code>repeated .akka.contrib.persistence.query.QueryViewSnapshot.SequenceNrEntry sequenceNrs = 1;</code>
             */
            public Builder removeSequenceNrs(int index) {
                if (sequenceNrsBuilder_ == null) {
                    ensureSequenceNrsIsMutable();
                    sequenceNrs_.remove(index);
                    onChanged();
                } else {
                    sequenceNrsBuilder_.remove(index);
                }
                return this;
            }
            /**
             * <code>repeated .akka.contrib.persistence.query.QueryViewSnapshot.SequenceNrEntry sequenceNrs = 1;</code>
             */
            public akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntry.Builder getSequenceNrsBuilder(
                    int index) {
                return getSequenceNrsFieldBuilder().getBuilder(index);
            }
            /**
             * <code>repeated .akka.contrib.persistence.query.QueryViewSnapshot.SequenceNrEntry sequenceNrs = 1;</code>
             */
            public akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntryOrBuilder getSequenceNrsOrBuilder(
                    int index) {
                if (sequenceNrsBuilder_ == null) {
                    return sequenceNrs_.get(index);  } else {
                    return sequenceNrsBuilder_.getMessageOrBuilder(index);
                }
            }
            /**
             * <code>repeated .akka.contrib.persistence.query.QueryViewSnapshot.SequenceNrEntry sequenceNrs = 1;</code>
             */
            public java.util.List<? extends akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntryOrBuilder>
            getSequenceNrsOrBuilderList() {
                if (sequenceNrsBuilder_ != null) {
                    return sequenceNrsBuilder_.getMessageOrBuilderList();
                } else {
                    return java.util.Collections.unmodifiableList(sequenceNrs_);
                }
            }
            /**
             * <code>repeated .akka.contrib.persistence.query.QueryViewSnapshot.SequenceNrEntry sequenceNrs = 1;</code>
             */
            public akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntry.Builder addSequenceNrsBuilder() {
                return getSequenceNrsFieldBuilder().addBuilder(
                        akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntry.getDefaultInstance());
            }
            /**
             * <code>repeated .akka.contrib.persistence.query.QueryViewSnapshot.SequenceNrEntry sequenceNrs = 1;</code>
             */
            public akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntry.Builder addSequenceNrsBuilder(
                    int index) {
                return getSequenceNrsFieldBuilder().addBuilder(
                        index, akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntry.getDefaultInstance());
            }
            /**
             * <code>repeated .akka.contrib.persistence.query.QueryViewSnapshot.SequenceNrEntry sequenceNrs = 1;</code>
             */
            public java.util.List<akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntry.Builder>
            getSequenceNrsBuilderList() {
                return getSequenceNrsFieldBuilder().getBuilderList();
            }
            private akka.protobuf.RepeatedFieldBuilder<
                    akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntry, akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntry.Builder, akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntryOrBuilder>
            getSequenceNrsFieldBuilder() {
                if (sequenceNrsBuilder_ == null) {
                    sequenceNrsBuilder_ = new akka.protobuf.RepeatedFieldBuilder<
                            akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntry, akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntry.Builder, akka.contrib.persistence.query.QueryViewFormats.QueryViewSnapshot.SequenceNrEntryOrBuilder>(
                            sequenceNrs_,
                            ((bitField0_ & 0x00000001) == 0x00000001),
                            getParentForChildren(),
                            isClean());
                    sequenceNrs_ = null;
                }
                return sequenceNrsBuilder_;
            }

            private akka.contrib.persistence.query.QueryViewFormats.Payload maxOffset_ = akka.contrib.persistence.query.QueryViewFormats.Payload.getDefaultInstance();
            private akka.protobuf.SingleFieldBuilder<
                    akka.contrib.persistence.query.QueryViewFormats.Payload, akka.contrib.persistence.query.QueryViewFormats.Payload.Builder, akka.contrib.persistence.query.QueryViewFormats.PayloadOrBuilder> maxOffsetBuilder_;
            /**
             * <code>optional .akka.contrib.persistence.query.Payload maxOffset = 2;</code>
             */
            public boolean hasMaxOffset() {
                return ((bitField0_ & 0x00000002) == 0x00000002);
            }
            /**
             * <code>optional .akka.contrib.persistence.query.Payload maxOffset = 2;</code>
             */
            public akka.contrib.persistence.query.QueryViewFormats.Payload getMaxOffset() {
                if (maxOffsetBuilder_ == null) {
                    return maxOffset_;
                } else {
                    return maxOffsetBuilder_.getMessage();
                }
            }
            /**
             * <code>optional .akka.contrib.persistence.query.Payload maxOffset = 2;</code>
             */
            public Builder setMaxOffset(akka.contrib.persistence.query.QueryViewFormats.Payload value) {
                if (maxOffsetBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    maxOffset_ = value;
                    onChanged();
                } else {
                    maxOffsetBuilder_.setMessage(value);
                }
                bitField0_ |= 0x00000002;
                return this;
            }
            /**
             * <code>optional .akka.contrib.persistence.query.Payload maxOffset = 2;</code>
             */
            public Builder setMaxOffset(
                    akka.contrib.persistence.query.QueryViewFormats.Payload.Builder builderForValue) {
                if (maxOffsetBuilder_ == null) {
                    maxOffset_ = builderForValue.build();
                    onChanged();
                } else {
                    maxOffsetBuilder_.setMessage(builderForValue.build());
                }
                bitField0_ |= 0x00000002;
                return this;
            }
            /**
             * <code>optional .akka.contrib.persistence.query.Payload maxOffset = 2;</code>
             */
            public Builder mergeMaxOffset(akka.contrib.persistence.query.QueryViewFormats.Payload value) {
                if (maxOffsetBuilder_ == null) {
                    if (((bitField0_ & 0x00000002) == 0x00000002) &&
                            maxOffset_ != akka.contrib.persistence.query.QueryViewFormats.Payload.getDefaultInstance()) {
                        maxOffset_ =
                                akka.contrib.persistence.query.QueryViewFormats.Payload.newBuilder(maxOffset_).mergeFrom(value).buildPartial();
                    } else {
                        maxOffset_ = value;
                    }
                    onChanged();
                } else {
                    maxOffsetBuilder_.mergeFrom(value);
                }
                bitField0_ |= 0x00000002;
                return this;
            }
            /**
             * <code>optional .akka.contrib.persistence.query.Payload maxOffset = 2;</code>
             */
            public Builder clearMaxOffset() {
                if (maxOffsetBuilder_ == null) {
                    maxOffset_ = akka.contrib.persistence.query.QueryViewFormats.Payload.getDefaultInstance();
                    onChanged();
                } else {
                    maxOffsetBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000002);
                return this;
            }
            /**
             * <code>optional .akka.contrib.persistence.query.Payload maxOffset = 2;</code>
             */
            public akka.contrib.persistence.query.QueryViewFormats.Payload.Builder getMaxOffsetBuilder() {
                bitField0_ |= 0x00000002;
                onChanged();
                return getMaxOffsetFieldBuilder().getBuilder();
            }
            /**
             * <code>optional .akka.contrib.persistence.query.Payload maxOffset = 2;</code>
             */
            public akka.contrib.persistence.query.QueryViewFormats.PayloadOrBuilder getMaxOffsetOrBuilder() {
                if (maxOffsetBuilder_ != null) {
                    return maxOffsetBuilder_.getMessageOrBuilder();
                } else {
                    return maxOffset_;
                }
            }
            /**
             * <code>optional .akka.contrib.persistence.query.Payload maxOffset = 2;</code>
             */
            private akka.protobuf.SingleFieldBuilder<
                    akka.contrib.persistence.query.QueryViewFormats.Payload, akka.contrib.persistence.query.QueryViewFormats.Payload.Builder, akka.contrib.persistence.query.QueryViewFormats.PayloadOrBuilder>
            getMaxOffsetFieldBuilder() {
                if (maxOffsetBuilder_ == null) {
                    maxOffsetBuilder_ = new akka.protobuf.SingleFieldBuilder<
                            akka.contrib.persistence.query.QueryViewFormats.Payload, akka.contrib.persistence.query.QueryViewFormats.Payload.Builder, akka.contrib.persistence.query.QueryViewFormats.PayloadOrBuilder>(
                            getMaxOffset(),
                            getParentForChildren(),
                            isClean());
                    maxOffset_ = null;
                }
                return maxOffsetBuilder_;
            }

            private akka.contrib.persistence.query.QueryViewFormats.Payload data_ = akka.contrib.persistence.query.QueryViewFormats.Payload.getDefaultInstance();
            private akka.protobuf.SingleFieldBuilder<
                    akka.contrib.persistence.query.QueryViewFormats.Payload, akka.contrib.persistence.query.QueryViewFormats.Payload.Builder, akka.contrib.persistence.query.QueryViewFormats.PayloadOrBuilder> dataBuilder_;
            /**
             * <code>optional .akka.contrib.persistence.query.Payload data = 3;</code>
             */
            public boolean hasData() {
                return ((bitField0_ & 0x00000004) == 0x00000004);
            }
            /**
             * <code>optional .akka.contrib.persistence.query.Payload data = 3;</code>
             */
            public akka.contrib.persistence.query.QueryViewFormats.Payload getData() {
                if (dataBuilder_ == null) {
                    return data_;
                } else {
                    return dataBuilder_.getMessage();
                }
            }
            /**
             * <code>optional .akka.contrib.persistence.query.Payload data = 3;</code>
             */
            public Builder setData(akka.contrib.persistence.query.QueryViewFormats.Payload value) {
                if (dataBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    data_ = value;
                    onChanged();
                } else {
                    dataBuilder_.setMessage(value);
                }
                bitField0_ |= 0x00000004;
                return this;
            }
            /**
             * <code>optional .akka.contrib.persistence.query.Payload data = 3;</code>
             */
            public Builder setData(
                    akka.contrib.persistence.query.QueryViewFormats.Payload.Builder builderForValue) {
                if (dataBuilder_ == null) {
                    data_ = builderForValue.build();
                    onChanged();
                } else {
                    dataBuilder_.setMessage(builderForValue.build());
                }
                bitField0_ |= 0x00000004;
                return this;
            }
            /**
             * <code>optional .akka.contrib.persistence.query.Payload data = 3;</code>
             */
            public Builder mergeData(akka.contrib.persistence.query.QueryViewFormats.Payload value) {
                if (dataBuilder_ == null) {
                    if (((bitField0_ & 0x00000004) == 0x00000004) &&
                            data_ != akka.contrib.persistence.query.QueryViewFormats.Payload.getDefaultInstance()) {
                        data_ =
                                akka.contrib.persistence.query.QueryViewFormats.Payload.newBuilder(data_).mergeFrom(value).buildPartial();
                    } else {
                        data_ = value;
                    }
                    onChanged();
                } else {
                    dataBuilder_.mergeFrom(value);
                }
                bitField0_ |= 0x00000004;
                return this;
            }
            /**
             * <code>optional .akka.contrib.persistence.query.Payload data = 3;</code>
             */
            public Builder clearData() {
                if (dataBuilder_ == null) {
                    data_ = akka.contrib.persistence.query.QueryViewFormats.Payload.getDefaultInstance();
                    onChanged();
                } else {
                    dataBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000004);
                return this;
            }
            /**
             * <code>optional .akka.contrib.persistence.query.Payload data = 3;</code>
             */
            public akka.contrib.persistence.query.QueryViewFormats.Payload.Builder getDataBuilder() {
                bitField0_ |= 0x00000004;
                onChanged();
                return getDataFieldBuilder().getBuilder();
            }
            /**
             * <code>optional .akka.contrib.persistence.query.Payload data = 3;</code>
             */
            public akka.contrib.persistence.query.QueryViewFormats.PayloadOrBuilder getDataOrBuilder() {
                if (dataBuilder_ != null) {
                    return dataBuilder_.getMessageOrBuilder();
                } else {
                    return data_;
                }
            }
            /**
             * <code>optional .akka.contrib.persistence.query.Payload data = 3;</code>
             */
            private akka.protobuf.SingleFieldBuilder<
                    akka.contrib.persistence.query.QueryViewFormats.Payload, akka.contrib.persistence.query.QueryViewFormats.Payload.Builder, akka.contrib.persistence.query.QueryViewFormats.PayloadOrBuilder>
            getDataFieldBuilder() {
                if (dataBuilder_ == null) {
                    dataBuilder_ = new akka.protobuf.SingleFieldBuilder<
                            akka.contrib.persistence.query.QueryViewFormats.Payload, akka.contrib.persistence.query.QueryViewFormats.Payload.Builder, akka.contrib.persistence.query.QueryViewFormats.PayloadOrBuilder>(
                            getData(),
                            getParentForChildren(),
                            isClean());
                    data_ = null;
                }
                return dataBuilder_;
            }

            // @@protoc_insertion_point(builder_scope:akka.contrib.persistence.query.QueryViewSnapshot)
        }

        static {
            defaultInstance = new QueryViewSnapshot(true);
            defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:akka.contrib.persistence.query.QueryViewSnapshot)
    }

    public interface PayloadOrBuilder extends
            // @@protoc_insertion_point(interface_extends:akka.contrib.persistence.query.Payload)
            akka.protobuf.MessageOrBuilder {

        /**
         * <code>optional bytes enclosedMessage = 1;</code>
         */
        boolean hasEnclosedMessage();
        /**
         * <code>optional bytes enclosedMessage = 1;</code>
         */
        akka.protobuf.ByteString getEnclosedMessage();

        /**
         * <code>optional int32 serializerId = 2;</code>
         */
        boolean hasSerializerId();
        /**
         * <code>optional int32 serializerId = 2;</code>
         */
        int getSerializerId();

        /**
         * <code>optional string messageManifest = 4;</code>
         */
        boolean hasMessageManifest();
        /**
         * <code>optional string messageManifest = 4;</code>
         */
        java.lang.String getMessageManifest();
        /**
         * <code>optional string messageManifest = 4;</code>
         */
        akka.protobuf.ByteString
        getMessageManifestBytes();
    }
    /**
     * Protobuf type {@code akka.contrib.persistence.query.Payload}
     */
    public static final class Payload extends
            akka.protobuf.GeneratedMessage implements
            // @@protoc_insertion_point(message_implements:akka.contrib.persistence.query.Payload)
            PayloadOrBuilder {
        // Use Payload.newBuilder() to construct.
        private Payload(akka.protobuf.GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }
        private Payload(boolean noInit) { this.unknownFields = akka.protobuf.UnknownFieldSet.getDefaultInstance(); }

        private static final Payload defaultInstance;
        public static Payload getDefaultInstance() {
            return defaultInstance;
        }

        public Payload getDefaultInstanceForType() {
            return defaultInstance;
        }

        private final akka.protobuf.UnknownFieldSet unknownFields;
        @java.lang.Override
        public final akka.protobuf.UnknownFieldSet
        getUnknownFields() {
            return this.unknownFields;
        }
        private Payload(
                akka.protobuf.CodedInputStream input,
                akka.protobuf.ExtensionRegistryLite extensionRegistry)
                throws akka.protobuf.InvalidProtocolBufferException {
            initFields();
            int mutable_bitField0_ = 0;
            akka.protobuf.UnknownFieldSet.Builder unknownFields =
                    akka.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFields,
                                    extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 10: {
                            bitField0_ |= 0x00000001;
                            enclosedMessage_ = input.readBytes();
                            break;
                        }
                        case 16: {
                            bitField0_ |= 0x00000002;
                            serializerId_ = input.readInt32();
                            break;
                        }
                        case 34: {
                            akka.protobuf.ByteString bs = input.readBytes();
                            bitField0_ |= 0x00000004;
                            messageManifest_ = bs;
                            break;
                        }
                    }
                }
            } catch (akka.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new akka.protobuf.InvalidProtocolBufferException(
                        e.getMessage()).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }
        public static final akka.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return akka.contrib.persistence.query.QueryViewFormats.internal_static_akka_contrib_persistence_query_Payload_descriptor;
        }

        protected akka.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return akka.contrib.persistence.query.QueryViewFormats.internal_static_akka_contrib_persistence_query_Payload_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            akka.contrib.persistence.query.QueryViewFormats.Payload.class, akka.contrib.persistence.query.QueryViewFormats.Payload.Builder.class);
        }

        public static akka.protobuf.Parser<Payload> PARSER =
                new akka.protobuf.AbstractParser<Payload>() {
                    public Payload parsePartialFrom(
                            akka.protobuf.CodedInputStream input,
                            akka.protobuf.ExtensionRegistryLite extensionRegistry)
                            throws akka.protobuf.InvalidProtocolBufferException {
                        return new Payload(input, extensionRegistry);
                    }
                };

        @java.lang.Override
        public akka.protobuf.Parser<Payload> getParserForType() {
            return PARSER;
        }

        private int bitField0_;
        public static final int ENCLOSEDMESSAGE_FIELD_NUMBER = 1;
        private akka.protobuf.ByteString enclosedMessage_;
        /**
         * <code>optional bytes enclosedMessage = 1;</code>
         */
        public boolean hasEnclosedMessage() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional bytes enclosedMessage = 1;</code>
         */
        public akka.protobuf.ByteString getEnclosedMessage() {
            return enclosedMessage_;
        }

        public static final int SERIALIZERID_FIELD_NUMBER = 2;
        private int serializerId_;
        /**
         * <code>optional int32 serializerId = 2;</code>
         */
        public boolean hasSerializerId() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional int32 serializerId = 2;</code>
         */
        public int getSerializerId() {
            return serializerId_;
        }

        public static final int MESSAGEMANIFEST_FIELD_NUMBER = 4;
        private java.lang.Object messageManifest_;
        /**
         * <code>optional string messageManifest = 4;</code>
         */
        public boolean hasMessageManifest() {
            return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>optional string messageManifest = 4;</code>
         */
        public java.lang.String getMessageManifest() {
            java.lang.Object ref = messageManifest_;
            if (ref instanceof java.lang.String) {
                return (java.lang.String) ref;
            } else {
                akka.protobuf.ByteString bs =
                        (akka.protobuf.ByteString) ref;
                java.lang.String s = bs.toStringUtf8();
                if (bs.isValidUtf8()) {
                    messageManifest_ = s;
                }
                return s;
            }
        }
        /**
         * <code>optional string messageManifest = 4;</code>
         */
        public akka.protobuf.ByteString
        getMessageManifestBytes() {
            java.lang.Object ref = messageManifest_;
            if (ref instanceof java.lang.String) {
                akka.protobuf.ByteString b =
                        akka.protobuf.ByteString.copyFromUtf8(
                                (java.lang.String) ref);
                messageManifest_ = b;
                return b;
            } else {
                return (akka.protobuf.ByteString) ref;
            }
        }

        private void initFields() {
            enclosedMessage_ = akka.protobuf.ByteString.EMPTY;
            serializerId_ = 0;
            messageManifest_ = "";
        }
        private byte memoizedIsInitialized = -1;
        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(akka.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            getSerializedSize();
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeBytes(1, enclosedMessage_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                output.writeInt32(2, serializerId_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                output.writeBytes(4, getMessageManifestBytes());
            }
            getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;
        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += akka.protobuf.CodedOutputStream
                        .computeBytesSize(1, enclosedMessage_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                size += akka.protobuf.CodedOutputStream
                        .computeInt32Size(2, serializerId_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                size += akka.protobuf.CodedOutputStream
                        .computeBytesSize(4, getMessageManifestBytes());
            }
            size += getUnknownFields().getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;
        @java.lang.Override
        protected java.lang.Object writeReplace()
                throws java.io.ObjectStreamException {
            return super.writeReplace();
        }

        public static akka.contrib.persistence.query.QueryViewFormats.Payload parseFrom(
                akka.protobuf.ByteString data)
                throws akka.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }
        public static akka.contrib.persistence.query.QueryViewFormats.Payload parseFrom(
                akka.protobuf.ByteString data,
                akka.protobuf.ExtensionRegistryLite extensionRegistry)
                throws akka.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }
        public static akka.contrib.persistence.query.QueryViewFormats.Payload parseFrom(byte[] data)
                throws akka.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }
        public static akka.contrib.persistence.query.QueryViewFormats.Payload parseFrom(
                byte[] data,
                akka.protobuf.ExtensionRegistryLite extensionRegistry)
                throws akka.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }
        public static akka.contrib.persistence.query.QueryViewFormats.Payload parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }
        public static akka.contrib.persistence.query.QueryViewFormats.Payload parseFrom(
                java.io.InputStream input,
                akka.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }
        public static akka.contrib.persistence.query.QueryViewFormats.Payload parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input);
        }
        public static akka.contrib.persistence.query.QueryViewFormats.Payload parseDelimitedFrom(
                java.io.InputStream input,
                akka.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }
        public static akka.contrib.persistence.query.QueryViewFormats.Payload parseFrom(
                akka.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }
        public static akka.contrib.persistence.query.QueryViewFormats.Payload parseFrom(
                akka.protobuf.CodedInputStream input,
                akka.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() { return Builder.create(); }
        public Builder newBuilderForType() { return newBuilder(); }
        public static Builder newBuilder(akka.contrib.persistence.query.QueryViewFormats.Payload prototype) {
            return newBuilder().mergeFrom(prototype);
        }
        public Builder toBuilder() { return newBuilder(this); }

        @java.lang.Override
        protected Builder newBuilderForType(
                akka.protobuf.GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }
        /**
         * Protobuf type {@code akka.contrib.persistence.query.Payload}
         */
        public static final class Builder extends
                akka.protobuf.GeneratedMessage.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:akka.contrib.persistence.query.Payload)
                akka.contrib.persistence.query.QueryViewFormats.PayloadOrBuilder {
            public static final akka.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return akka.contrib.persistence.query.QueryViewFormats.internal_static_akka_contrib_persistence_query_Payload_descriptor;
            }

            protected akka.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return akka.contrib.persistence.query.QueryViewFormats.internal_static_akka_contrib_persistence_query_Payload_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                akka.contrib.persistence.query.QueryViewFormats.Payload.class, akka.contrib.persistence.query.QueryViewFormats.Payload.Builder.class);
            }

            // Construct using akka.contrib.persistence.query.QueryViewFormats.Payload.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    akka.protobuf.GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }
            private void maybeForceBuilderInitialization() {
                if (akka.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                }
            }
            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                enclosedMessage_ = akka.protobuf.ByteString.EMPTY;
                bitField0_ = (bitField0_ & ~0x00000001);
                serializerId_ = 0;
                bitField0_ = (bitField0_ & ~0x00000002);
                messageManifest_ = "";
                bitField0_ = (bitField0_ & ~0x00000004);
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public akka.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return akka.contrib.persistence.query.QueryViewFormats.internal_static_akka_contrib_persistence_query_Payload_descriptor;
            }

            public akka.contrib.persistence.query.QueryViewFormats.Payload getDefaultInstanceForType() {
                return akka.contrib.persistence.query.QueryViewFormats.Payload.getDefaultInstance();
            }

            public akka.contrib.persistence.query.QueryViewFormats.Payload build() {
                akka.contrib.persistence.query.QueryViewFormats.Payload result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public akka.contrib.persistence.query.QueryViewFormats.Payload buildPartial() {
                akka.contrib.persistence.query.QueryViewFormats.Payload result = new akka.contrib.persistence.query.QueryViewFormats.Payload(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                    to_bitField0_ |= 0x00000001;
                }
                result.enclosedMessage_ = enclosedMessage_;
                if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                    to_bitField0_ |= 0x00000002;
                }
                result.serializerId_ = serializerId_;
                if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
                    to_bitField0_ |= 0x00000004;
                }
                result.messageManifest_ = messageManifest_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(akka.protobuf.Message other) {
                if (other instanceof akka.contrib.persistence.query.QueryViewFormats.Payload) {
                    return mergeFrom((akka.contrib.persistence.query.QueryViewFormats.Payload)other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(akka.contrib.persistence.query.QueryViewFormats.Payload other) {
                if (other == akka.contrib.persistence.query.QueryViewFormats.Payload.getDefaultInstance()) return this;
                if (other.hasEnclosedMessage()) {
                    setEnclosedMessage(other.getEnclosedMessage());
                }
                if (other.hasSerializerId()) {
                    setSerializerId(other.getSerializerId());
                }
                if (other.hasMessageManifest()) {
                    bitField0_ |= 0x00000004;
                    messageManifest_ = other.messageManifest_;
                    onChanged();
                }
                this.mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    akka.protobuf.CodedInputStream input,
                    akka.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                akka.contrib.persistence.query.QueryViewFormats.Payload parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (akka.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (akka.contrib.persistence.query.QueryViewFormats.Payload) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }
            private int bitField0_;

            private akka.protobuf.ByteString enclosedMessage_ = akka.protobuf.ByteString.EMPTY;
            /**
             * <code>optional bytes enclosedMessage = 1;</code>
             */
            public boolean hasEnclosedMessage() {
                return ((bitField0_ & 0x00000001) == 0x00000001);
            }
            /**
             * <code>optional bytes enclosedMessage = 1;</code>
             */
            public akka.protobuf.ByteString getEnclosedMessage() {
                return enclosedMessage_;
            }
            /**
             * <code>optional bytes enclosedMessage = 1;</code>
             */
            public Builder setEnclosedMessage(akka.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000001;
                enclosedMessage_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>optional bytes enclosedMessage = 1;</code>
             */
            public Builder clearEnclosedMessage() {
                bitField0_ = (bitField0_ & ~0x00000001);
                enclosedMessage_ = getDefaultInstance().getEnclosedMessage();
                onChanged();
                return this;
            }

            private int serializerId_ ;
            /**
             * <code>optional int32 serializerId = 2;</code>
             */
            public boolean hasSerializerId() {
                return ((bitField0_ & 0x00000002) == 0x00000002);
            }
            /**
             * <code>optional int32 serializerId = 2;</code>
             */
            public int getSerializerId() {
                return serializerId_;
            }
            /**
             * <code>optional int32 serializerId = 2;</code>
             */
            public Builder setSerializerId(int value) {
                bitField0_ |= 0x00000002;
                serializerId_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>optional int32 serializerId = 2;</code>
             */
            public Builder clearSerializerId() {
                bitField0_ = (bitField0_ & ~0x00000002);
                serializerId_ = 0;
                onChanged();
                return this;
            }

            private java.lang.Object messageManifest_ = "";
            /**
             * <code>optional string messageManifest = 4;</code>
             */
            public boolean hasMessageManifest() {
                return ((bitField0_ & 0x00000004) == 0x00000004);
            }
            /**
             * <code>optional string messageManifest = 4;</code>
             */
            public java.lang.String getMessageManifest() {
                java.lang.Object ref = messageManifest_;
                if (!(ref instanceof java.lang.String)) {
                    akka.protobuf.ByteString bs =
                            (akka.protobuf.ByteString) ref;
                    java.lang.String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) {
                        messageManifest_ = s;
                    }
                    return s;
                } else {
                    return (java.lang.String) ref;
                }
            }
            /**
             * <code>optional string messageManifest = 4;</code>
             */
            public akka.protobuf.ByteString
            getMessageManifestBytes() {
                java.lang.Object ref = messageManifest_;
                if (ref instanceof String) {
                    akka.protobuf.ByteString b =
                            akka.protobuf.ByteString.copyFromUtf8(
                                    (java.lang.String) ref);
                    messageManifest_ = b;
                    return b;
                } else {
                    return (akka.protobuf.ByteString) ref;
                }
            }
            /**
             * <code>optional string messageManifest = 4;</code>
             */
            public Builder setMessageManifest(
                    java.lang.String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000004;
                messageManifest_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>optional string messageManifest = 4;</code>
             */
            public Builder clearMessageManifest() {
                bitField0_ = (bitField0_ & ~0x00000004);
                messageManifest_ = getDefaultInstance().getMessageManifest();
                onChanged();
                return this;
            }
            /**
             * <code>optional string messageManifest = 4;</code>
             */
            public Builder setMessageManifestBytes(
                    akka.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000004;
                messageManifest_ = value;
                onChanged();
                return this;
            }

            // @@protoc_insertion_point(builder_scope:akka.contrib.persistence.query.Payload)
        }

        static {
            defaultInstance = new Payload(true);
            defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:akka.contrib.persistence.query.Payload)
    }

    private static final akka.protobuf.Descriptors.Descriptor
            internal_static_akka_contrib_persistence_query_QueryViewSnapshot_descriptor;
    private static
    akka.protobuf.GeneratedMessage.FieldAccessorTable
            internal_static_akka_contrib_persistence_query_QueryViewSnapshot_fieldAccessorTable;
    private static final akka.protobuf.Descriptors.Descriptor
            internal_static_akka_contrib_persistence_query_QueryViewSnapshot_SequenceNrEntry_descriptor;
    private static
    akka.protobuf.GeneratedMessage.FieldAccessorTable
            internal_static_akka_contrib_persistence_query_QueryViewSnapshot_SequenceNrEntry_fieldAccessorTable;
    private static final akka.protobuf.Descriptors.Descriptor
            internal_static_akka_contrib_persistence_query_Payload_descriptor;
    private static
    akka.protobuf.GeneratedMessage.FieldAccessorTable
            internal_static_akka_contrib_persistence_query_Payload_fieldAccessorTable;

    public static akka.protobuf.Descriptors.FileDescriptor
    getDescriptor() {
        return descriptor;
    }
    private static akka.protobuf.Descriptors.FileDescriptor
            descriptor;
    static {
        java.lang.String[] descriptorData = {
                "\n(src/main/protobuf/QueryViewFormats.pro" +
                        "to\022\036akka.contrib.persistence.query\"\234\002\n\021Q" +
                        "ueryViewSnapshot\022V\n\013sequenceNrs\030\001 \003(\0132A." +
                        "akka.contrib.persistence.query.QueryView" +
                        "Snapshot.SequenceNrEntry\022:\n\tmaxOffset\030\002 " +
                        "\001(\0132\'.akka.contrib.persistence.query.Pay" +
                        "load\0225\n\004data\030\003 \001(\0132\'.akka.contrib.persis" +
                        "tence.query.Payload\032<\n\017SequenceNrEntry\022\025" +
                        "\n\rpersistenceId\030\001 \001(\t\022\022\n\nsequenceNr\030\002 \001(" +
                        "\003\"Q\n\007Payload\022\027\n\017enclosedMessage\030\001 \001(\014\022\024\n",
                "\014serializerId\030\002 \001(\005\022\027\n\017messageManifest\030\004" +
                        " \001(\tB\002H\001"
        };
        akka.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
                new akka.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
                    public akka.protobuf.ExtensionRegistry assignDescriptors(
                            akka.protobuf.Descriptors.FileDescriptor root) {
                        descriptor = root;
                        return null;
                    }
                };
        akka.protobuf.Descriptors.FileDescriptor
                .internalBuildGeneratedFileFrom(descriptorData,
                        new akka.protobuf.Descriptors.FileDescriptor[] {
                        }, assigner);
        internal_static_akka_contrib_persistence_query_QueryViewSnapshot_descriptor =
                getDescriptor().getMessageTypes().get(0);
        internal_static_akka_contrib_persistence_query_QueryViewSnapshot_fieldAccessorTable = new
                akka.protobuf.GeneratedMessage.FieldAccessorTable(
                internal_static_akka_contrib_persistence_query_QueryViewSnapshot_descriptor,
                new java.lang.String[] { "SequenceNrs", "MaxOffset", "Data", });
        internal_static_akka_contrib_persistence_query_QueryViewSnapshot_SequenceNrEntry_descriptor =
                internal_static_akka_contrib_persistence_query_QueryViewSnapshot_descriptor.getNestedTypes().get(0);
        internal_static_akka_contrib_persistence_query_QueryViewSnapshot_SequenceNrEntry_fieldAccessorTable = new
                akka.protobuf.GeneratedMessage.FieldAccessorTable(
                internal_static_akka_contrib_persistence_query_QueryViewSnapshot_SequenceNrEntry_descriptor,
                new java.lang.String[] { "PersistenceId", "SequenceNr", });
        internal_static_akka_contrib_persistence_query_Payload_descriptor =
                getDescriptor().getMessageTypes().get(1);
        internal_static_akka_contrib_persistence_query_Payload_fieldAccessorTable = new
                akka.protobuf.GeneratedMessage.FieldAccessorTable(
                internal_static_akka_contrib_persistence_query_Payload_descriptor,
                new java.lang.String[] { "EnclosedMessage", "SerializerId", "MessageManifest", });
    }

    // @@protoc_insertion_point(outer_class_scope)
}
